from ballet.assembly.simplified.assembly import ComponentType
from ballet.assembly.simplified.type.tagging import classtag


@classtag.tag("cps_system")
def system_type():
    t = ComponentType("system")
    pl_deployed = t.add_place("deployed")
    pl_configured = t.add_place("configured")
    pl_initiated = t.add_place("initiated")
    t.set_initial_place(pl_initiated)
    t.set_running_place(pl_deployed)
    bhv_switch_on = t.add_behavior("deploy")
    bhv_switch_on.add_transition("deploy11", pl_initiated, pl_configured)
    bhv_switch_on.add_transition("deploy12", pl_initiated, pl_configured)
    bhv_switch_on.add_transition("deploy13", pl_initiated, pl_configured)
    bhv_switch_on.add_transition("deploy2", pl_configured, pl_deployed)
    bhv_interrupt = t.add_behavior("interrupt")
    bhv_interrupt.add_transition("interrupt1", pl_deployed, pl_configured)
    bhv_stop = t.add_behavior("stop")
    bhv_stop.add_transition("stop1", pl_deployed, pl_initiated)
    t.add_provide_port("service", {pl_deployed})
    t.add_use_port("db_service", {pl_configured, pl_deployed})
    return t


@classtag.tag("cps_listener")
def listener_type():
    t = ComponentType("listener")
    pl_running = t.add_place("running")
    pl_configured = t.add_place("configured")
    pl_paused = t.add_place("paused")
    pl_off = t.add_place("off")
    t.set_initial_place(pl_off)
    t.set_running_place(pl_running)
    bhv_deploy = t.add_behavior("deploy")
    bhv_deploy.add_transition("deploy1", pl_off, pl_paused)
    bhv_deploy.add_transition("deploy2", pl_paused, pl_configured)
    bhv_deploy.add_transition("deploy3", pl_configured, pl_running)
    bhv_update = t.add_behavior("update")
    bhv_update.add_transition("update1", pl_running, pl_paused)
    bhv_destroy = t.add_behavior("destroy")
    bhv_destroy.add_transition("destroy1", pl_paused, pl_off)
    t.add_use_port("sys_service", {pl_running, pl_configured})
    t.add_provide_port("rcv", {pl_running})
    t.add_provide_port("config", {pl_running, pl_configured})
    return t


@classtag.tag("cps_sensor")
def sensor_type():
    t = ComponentType("sensor")
    pl_running = t.add_place("running")
    pl_configured = t.add_place("configured")
    pl_installed = t.add_place("installed")
    pl_provisioned = t.add_place("provisioned")
    pl_off = t.add_place("off")
    t.set_initial_place(pl_off)
    t.set_running_place(pl_running)
    bhv_deploy = t.add_behavior("deploy")
    bhv_deploy.add_transition("deploy11", pl_off, pl_provisioned)
    bhv_deploy.add_transition("deploy12", pl_off, pl_provisioned)
    bhv_deploy.add_transition("deploy13", pl_off, pl_provisioned)
    bhv_deploy.add_transition("deploy2", pl_provisioned, pl_installed)
    bhv_deploy.add_transition("deploy3", pl_installed, pl_configured)
    bhv_deploy.add_transition("deploy4", pl_configured, pl_running)
    bhv_pause = t.add_behavior("pause")
    bhv_pause.add_transition("pause1", pl_running, pl_provisioned)
    bhv_stop = t.add_behavior("stop")
    bhv_stop.add_transition("stop1", pl_provisioned, pl_off)
    t.add_use_port("rcv_service", {pl_running, pl_configured})
    t.add_use_port("config_service", {pl_configured, pl_installed, pl_running})
    return t


@classtag.tag("cps_database")
def database_type():
    t = ComponentType("database")
    pl_initiated = t.add_place("initiated")
    pl_configured = t.add_place("configured")
    pl_bootstrapped = t.add_place("bootstrapped")
    pl_deployed = t.add_place("deployed")
    pl_registered = t.add_place("registered")
    t.set_initial_place(pl_initiated)
    t.set_running_place(pl_deployed)
    bhv_deploy = t.add_behavior("deploy")
    bhv_deploy.add_transition("deploy11", pl_initiated, pl_configured)
    bhv_deploy.add_transition("deploy12", pl_initiated, pl_configured)
    bhv_deploy.add_transition("deploy2", pl_configured, pl_bootstrapped)
    bhv_deploy.add_transition("deploy3", pl_bootstrapped, pl_deployed)
    bhv_interrupt = t.add_behavior("interrupt")
    bhv_interrupt.add_transition("interrupt1", pl_deployed, pl_registered)
    bhv_pause = t.add_behavior("pause")
    bhv_pause.add_transition("pause1", pl_registered, pl_bootstrapped)
    bhv_update = t.add_behavior("update")
    bhv_update.add_transition("update", pl_registered, pl_configured)
    bhv_uninstall = t.add_behavior("uninstall")
    bhv_uninstall.add_transition("uninstall1", pl_registered, pl_initiated)
    t.add_provide_port("service", {pl_deployed})
    return t