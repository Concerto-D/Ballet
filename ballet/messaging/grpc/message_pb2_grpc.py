# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import ballet.messaging.grpc.message_pb2 as message__pb2


class MessagingStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddAckByID = channel.unary_unary(
                '/Messaging/AddAckByID',
                request_serializer=message__pb2.AckID.SerializeToString,
                response_deserializer=message__pb2.Empty.FromString,
                )
        self.AddPortConstraint = channel.unary_unary(
                '/Messaging/AddPortConstraint',
                request_serializer=message__pb2.portConstraint.SerializeToString,
                response_deserializer=message__pb2.Empty.FromString,
                )
        self.AddGlobalAck = channel.unary_unary(
                '/Messaging/AddGlobalAck',
                request_serializer=message__pb2.globalAckID.SerializeToString,
                response_deserializer=message__pb2.Empty.FromString,
                )
        self.ping = channel.unary_unary(
                '/Messaging/ping',
                request_serializer=message__pb2.Empty.SerializeToString,
                response_deserializer=message__pb2.Empty.FromString,
                )


class MessagingServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddAckByID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddPortConstraint(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddGlobalAck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MessagingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddAckByID': grpc.unary_unary_rpc_method_handler(
                    servicer.AddAckByID,
                    request_deserializer=message__pb2.AckID.FromString,
                    response_serializer=message__pb2.Empty.SerializeToString,
            ),
            'AddPortConstraint': grpc.unary_unary_rpc_method_handler(
                    servicer.AddPortConstraint,
                    request_deserializer=message__pb2.portConstraint.FromString,
                    response_serializer=message__pb2.Empty.SerializeToString,
            ),
            'AddGlobalAck': grpc.unary_unary_rpc_method_handler(
                    servicer.AddGlobalAck,
                    request_deserializer=message__pb2.globalAckID.FromString,
                    response_serializer=message__pb2.Empty.SerializeToString,
            ),
            'ping': grpc.unary_unary_rpc_method_handler(
                    servicer.ping,
                    request_deserializer=message__pb2.Empty.FromString,
                    response_serializer=message__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Messaging', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Messaging(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddAckByID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Messaging/AddAckByID',
            message__pb2.AckID.SerializeToString,
            message__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddPortConstraint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Messaging/AddPortConstraint',
            message__pb2.portConstraint.SerializeToString,
            message__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddGlobalAck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Messaging/AddGlobalAck',
            message__pb2.globalAckID.SerializeToString,
            message__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Messaging/ping',
            message__pb2.Empty.SerializeToString,
            message__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)